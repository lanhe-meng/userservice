// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: userservice.proto
#ifndef GRPC_userservice_2eproto__INCLUDED
#define GRPC_userservice_2eproto__INCLUDED

#include "userservice.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace user {

class UserService final {
 public:
  static constexpr char const* service_full_name() {
    return "user.UserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::user::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>> AsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>>(AsyncCreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>> PrepareAsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>>(PrepareAsyncCreateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUser(::grpc::ClientContext* context, const ::user::UserName& request, ::user::UserInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserInfo>> AsyncGetUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserInfo>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserInfo>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserInfo>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::user::UserInfo& request, ::user::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>> AsyncUpdateUser(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::user::UserName& request, ::user::CommonResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>> AsyncDeleteUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest* request, ::user::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest* request, ::user::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::UserInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::UserInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::user::UserInfo* request, ::user::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::user::UserInfo* request, ::user::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::CommonResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>* PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UserInfo>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UserInfo>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::CommonResponse>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::user::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>> AsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>>(AsyncCreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>> PrepareAsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>>(PrepareAsyncCreateUserRaw(context, request, cq));
    }
    ::grpc::Status GetUser(::grpc::ClientContext* context, const ::user::UserName& request, ::user::UserInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserInfo>> AsyncGetUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserInfo>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserInfo>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserInfo>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::user::UserInfo& request, ::user::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>> AsyncUpdateUser(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    ::grpc::Status DeleteUser(::grpc::ClientContext* context, const ::user::UserName& request, ::user::CommonResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>> AsyncDeleteUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>>(AsyncDeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>> PrepareAsyncDeleteUser(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>>(PrepareAsyncDeleteUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest* request, ::user::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateUser(::grpc::ClientContext* context, const ::user::CreateUserRequest* request, ::user::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::UserInfo* response, std::function<void(::grpc::Status)>) override;
      void GetUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::UserInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUser(::grpc::ClientContext* context, const ::user::UserInfo* request, ::user::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateUser(::grpc::ClientContext* context, const ::user::UserInfo* request, ::user::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::CommonResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteUser(::grpc::ClientContext* context, const ::user::UserName* request, ::user::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>* PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UserInfo>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UserInfo>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>* AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::CommonResponse>* PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::user::UserName& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::user::CreateUserRequest* request, ::user::CommonResponse* response);
    virtual ::grpc::Status GetUser(::grpc::ServerContext* context, const ::user::UserName* request, ::user::UserInfo* response);
    virtual ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::user::UserInfo* request, ::user::CommonResponse* response);
    virtual ::grpc::Status DeleteUser(::grpc::ServerContext* context, const ::user::UserName* request, ::user::CommonResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::user::CreateUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::user::UserName* request, ::grpc::ServerAsyncResponseWriter< ::user::UserInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::user::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::user::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::user::UserName* request, ::grpc::ServerAsyncResponseWriter< ::user::CommonResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateUser<WithAsyncMethod_GetUser<WithAsyncMethod_UpdateUser<WithAsyncMethod_DeleteUser<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::user::CreateUserRequest, ::user::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::CreateUserRequest* request, ::user::CommonResponse* response) { return this->CreateUser(context, request, response); }));}
    void SetMessageAllocatorFor_CreateUser(
        ::grpc::MessageAllocator< ::user::CreateUserRequest, ::user::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::CreateUserRequest, ::user::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::user::UserName, ::user::UserInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::UserName* request, ::user::UserInfo* response) { return this->GetUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetUser(
        ::grpc::MessageAllocator< ::user::UserName, ::user::UserInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::UserName, ::user::UserInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::user::UserInfo, ::user::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::UserInfo* request, ::user::CommonResponse* response) { return this->UpdateUser(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUser(
        ::grpc::MessageAllocator< ::user::UserInfo, ::user::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::UserInfo, ::user::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::user::UserName, ::user::CommonResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::UserName* request, ::user::CommonResponse* response) { return this->DeleteUser(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteUser(
        ::grpc::MessageAllocator< ::user::UserName, ::user::CommonResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::UserName, ::user::CommonResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateUser<WithCallbackMethod_GetUser<WithCallbackMethod_UpdateUser<WithCallbackMethod_DeleteUser<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::CreateUserRequest, ::user::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::CreateUserRequest, ::user::CommonResponse>* streamer) {
                       return this->StreamedCreateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateUserRequest* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::CreateUserRequest,::user::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::UserName, ::user::UserInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::UserName, ::user::UserInfo>* streamer) {
                       return this->StreamedGetUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::UserInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::UserName,::user::UserInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::UserInfo, ::user::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::UserInfo, ::user::CommonResponse>* streamer) {
                       return this->StreamedUpdateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UserInfo* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::UserInfo,::user::CommonResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::UserName, ::user::CommonResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::UserName, ::user::CommonResponse>* streamer) {
                       return this->StreamedDeleteUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUser(::grpc::ServerContext* /*context*/, const ::user::UserName* /*request*/, ::user::CommonResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::UserName,::user::CommonResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_GetUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_DeleteUser<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_GetUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_DeleteUser<Service > > > > StreamedService;
};

}  // namespace user


#endif  // GRPC_userservice_2eproto__INCLUDED
